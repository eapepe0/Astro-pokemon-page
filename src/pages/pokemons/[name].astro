---
import type { PokemonListResponse } from "@interfaces/pokemon-list.response";
import type { GetStaticPaths } from "astro";
import {Icon} from 'astro-icon/components';

import MainLayout from "@layouts/MainLayout.astro"
import PokemonCard from "@components/pokemons/PokemonCard.astro";
import Title from "@components/shared/Title.astro";




export const getStaticPaths = (async () => {

    const respuesta = await fetch('https://pokeapi.co/api/v2/pokemon?limit=151');  // obtenemos los 151 pokemones
    const {results} = await respuesta.json() as PokemonListResponse;  // extraemos los result y los tratamos como PokemonListResponse
    

    
    return results.map(({name , url}) => ({
        params : {name : name},
        props : {name : name , url : url}
    }))

     // construimos esto
    // [
    // { params:{ name: "bulbasaur" },props : {name :"bulbasaur" , url : "https://pokeapi.co/api/v2/pokemon/1/"} },
    // { params:{ name: "ivysaur" } ,props : {name :"ivysaur" , url : "https://pokeapi.co/api/v2/pokemon/2/"}},
    // ]
    
    
}) satisfies GetStaticPaths;

const {name} = Astro.params
const {url} = Astro.props  // extraigo el url de getStaticPaths
const id = url.split('/').slice(-2)[0];  // sacas el id del la url
const audioSrc = `https://raw.githubusercontent.com/PokeAPI/cries/main/cries/pokemon/latest/${id}.ogg`
 // obtenemos una imagen de fondo para los meta tags
const imageSrc = `https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/other/official-artwork/${id}.png`
 // sacamos el nombre con la mayuscula
const nameCapitalize = name.charAt(0).toUpperCase() + name.slice(1)
---
<MainLayout title=`Pokemon : ${nameCapitalize}` description={`Informacion sobre el pokemon : ${nameCapitalize}`} image={imageSrc}>
    <div class="mt-10 mx-10 flex flex-col justify-center items-center">
        <div class="flex flex-row">
        <div>
            <button onclick="history.back()" class="text-blue-500">Regresar</button>
           <Title>{name}</Title>
        </div>
        <button class="ml-4" id="btn-favorite" data-name = {name} data-id={id}>
            <Icon data-empty name="heart-empty" size={50}/>
            <Icon data-full class="hidden" name="heart-full" size={50}/>
        </button>
    </div>
        <div class="my-5">
            <PokemonCard name={name} url={url} isBig={true}/>
            <audio controls class="mt-5 w-full hover:scale-105  transition duration-300">
                <source src={audioSrc} type="audio/ogg">
                Your browser does not support the audio element.
            </audio>
        </div>
        <div>
            <a id="button" href={`../../pokemon/${id}`}>Por Id</a>
        </div>
    </section>
</MainLayout>


<script>
import type { FavoritePokemon } from "@interfaces/favorite-pokemon";

    
    const handlePageLoad = () =>{

        // guardamos en favoritePokemon o lo que haya en el localStorage , si no existe un arreglo vacio
        let favoritePokemons : FavoritePokemon[] = JSON.parse(localStorage.getItem('favorites') ?? "[]");

        const btnFavorite = document.querySelector('#btn-favorite') as HTMLButtonElement; /* seleccionamos el boton */

        // si no existe el boton salimos
        if (!btnFavorite ) return;

        const name = btnFavorite.dataset.name ?? ''; /* sacamos el dato del nombre */
        const id = btnFavorite.dataset.id ?? ''; /* sacamos el dato del id */

        // sacamos el estado del corazon
        const heartEmpty = btnFavorite.querySelector('[data-empty]') as HTMLElement

        const heartFull = btnFavorite.querySelector('[data-full]') as HTMLElement

        // si encuentra el nombre en favoritos se vuelve true
        const isFavorite = favoritePokemons.some((fav) => fav.name === name); 
        
        if(isFavorite === true){
            heartEmpty.classList.add('hidden')
            heartFull.classList.remove('hidden')
        }


        const toggleFavorite = () =>{
            const isFavorite = favoritePokemons.some((fav) => fav.name === name); // si encuentra el nombre en favoritos se vuelve true

            if (isFavorite){
                // Removemos
                favoritePokemons = favoritePokemons.filter((fav) => fav.name !== name);
            } else{
                // Agregamos
                favoritePokemons.push({
                    id: +id, // le agregamos el + para convertir de string a number
                    name : name
                })
            }

            localStorage.setItem('favorites', JSON.stringify(favoritePokemons))
        }

        // un evento al corazon para que haga algo
        btnFavorite.addEventListener('click' , () => {
            heartEmpty.classList.toggle('hidden')
            heartFull.classList.toggle('hidden')

            toggleFavorite();

        })
    }

    /* agregamos este listener , cuando astro carga la pagina , sino el script se ejecuta cuando se monta solamente */
    // tampoco carga este script si tenemos activado el <ViewTransitions/> de esta manera si nos deja

    document.addEventListener('astro:page-load' , handlePageLoad);
   



</script>

<style>
    a{
        @apply text-blue-500
    }
    #button{
        @apply p-2 bg-red-600 rounded-full text-white font-bold text-2xl
    }
    #btn-favorite{
        @apply hover:animate-pulse;
    }
</style>